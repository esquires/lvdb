                             For Vim version 7.3.
                          _                           _ _                   ~
                   __   _(_)_ __ ___        _ __   __| | |__                ~
                   \ \ / / | '_ ` _ \ _____| '_ \ / _` | '_ \               ~
                    \ V /| | | | | | |_____| |_) | (_| | |_) |              ~
                     \_/ |_|_| |_| |_|     | .__/ \__,_|_.__/               ~
                                           |_|                              ~

           Links Vim to ipdb for lightweight but powerful debugging

Author: Eric Squires
====================================================================
CONTENTS                                        *vim_pdb*

1. Installation ............................... |vim_pdb_installation|
2. Mappings/Settings .......................... |vim_pdb_mappings|
3. Background ................................. |vim_pdb_background|
4. Sample Workflow ............................ |vim_pdb_workflow|
5. License .................................... |vim_pdb_license|

====================================================================

1. Installation                                 *vim_pdb_installation*

    a)  Check Dependencies

        1)  vim --version | grep +python

            if there is no outupt to this command, recompile vim with the
            python flag enabled (something along the lines of ./configure
            --enable-pythoninterp)

        2)  pip install IPython

        3)  pip install ipdb

    b)  Install the Vim plugin

        If using Pathogen,

            1) place vim-pdb directory in .vim/bundle
            2) In vim, run ":Helptags"

        If not using Pathogen,

            1) place vim-pdb contents in .vim/
            2) In vim, run ":helptags"

        Anytime you need help, just type ":h vim_pdb.txt"

    c)  Install the VimPdb python plugin: cd into vim_pdb/python_pkg and type

        python setup.py install

        The code contained in this small package inherits the IPython debugger
        object, which inherits from PDB. The only addition is that it creates
        2 files while ipdb is running: .debug_location and .debug_monitor.

    d)  Alter ipdb slightly. We now need to tell ipdb to use the object
        installed in step c above.

        1)  find where ipdb is installed

            locate ipdb/__main__.py

            if locate is not installed on your system, just search under
            python/site-packages. The directory where __main__.py will be
            called <dir> below.

        2)  open <dir>/__main__.py and change the following lines

            original

                from IPython.core.debugger import Pdb, BdbQuit_excepthook

            altered

                from vim_pdb import VimPdb as Pdb
                from IPython.core.debugger import BdbQuit_excepthook

====================================================================
2. Mappings/Settings                            *vim_pdb_mappings*

    <localleader>d  starts the vim debugging monitor
                    can also be called with ":call vim_pdb#Python_debug()"

    <leader>n       toggles absolute and relative line numbers
                    can also be called with ":call vim_pdb#ToggleNumber()"

    If you don't have a local leader set, put the following in your .vimrc

        let maplocalleader = "\\"
        let mapleader = "\<space>"

    vim_pdb will also toggle line numbers if you desire (see :h rnu and :h nu)
    for details. When debugging (setting breakpoints, etc) to see absolute
    line numbers but when moving around in Vim, it is nice to have relative
    numbering (to do things like "4j" to move down 4 lines). To toggle this
    setting, set the following in vimrc:

        let g:vim_pdb_toggle_lines = 0

            never toggles lines (default)

        let g:vim_pdb_toggle_lines = 1

            only toggle lines in *.py files when the vim debugging monitor is
            active

        let g:vim_pdb_toggle_lines = 2

            always toggle lines for *.py files

        let g:vim_pdb_toggle_lines = 3

            always toggle lines for all files

====================================================================
3. Background                                   *vim_pdb_background*

    ipdb and gdb are text-based debuggers. Although they can give code context
    with the "list" command, it would be helpful to have vim highlight where
    you are in the code. vim-pdb incorporates this functionality.
    Specifically, it

        1) updates the cursor line in vim to match where pdb is in the
           debugging process

        2) Highlights/deletes breakpoints that have been set on the fly in
           pdb. It also highlights pdb.set_trace() lines when using ipdb.

    The vim-pdb debugger has been designed to be simple and lightweight but
    give full access to ipdb and gdb. For ipdb, it does this as follows:

        1) The python installation (see steps c and d in
           |vim_pdb_installation|) makes sure 2 files are created when ipdb is
           running. These are .debug_location and .debug_breakpoint, and they
           contain the current state of the debugger.

        2) When the user tells Vim to start the debug monitor, Vim will
           monitor .debug_location and .debug_breakpoint. From
           .debug_location, it will set the cursor to match where ipdb is in
           the code. Thus, the user can follow where ipdb is within Vim. From
           .debug_breakpoint, Vim sets highlighting so the user can know where
           the breakpoint is located.

    For gdb, it does this by having an external script monitor (see
    gdb\_monitor.py in the python\_pkg folder) that also updates
    .debug\_breakpoint and .debug\_location.

    For a more advanced Vim-based python debugger, see Pyclewn:
    http://pyclewn.sourceforge.net/

====================================================================
4. Sample Workflow (ipdb)                       *vim_pdb_workflow_python*

    a)  Put the following 2 files in some directory <dir> (block visual will
        be useful in copying this code. For details, type :h ctrl-v):

        -------------------------       |       -------------------------
        <dir>/temp.py                   |       <dir>/temp2.py
        -------------------------       |       -------------------------
                                        |
        import temp2                    |       def mult(a,b):
        import ipdb                     |           return a * b
                                        |
        def main():                     |       def div(a,b):
            a = 1                       |           return a / b
            ipdb.set_trace()            |
            b = 2                       |
            c = temp2.mult(a,b)         |
            d = temp2.div(a,b)          |
                                        |
            print 'a = ' + str(a)       |
            print 'b = ' + str(b)       |
            print 'c = ' + str(c)       |
            print 'd = ' + str(d)       |
                                        |
        if __name__ == '__main__':      |
            main()                      |

    b) open temp.py. Notice that the "ipdb.set_trace()" line is highlighted

       (if it is not, then something is probably turning your syntax off.
       Check your other plugins or vimrc. You can set syntax on by typing
       ":syntax on")

    c) In vim, type "\d" to start the debug monitor

       (assuming you have set <localleader> to "\" as suggested in
       |vim_pdb_mappings|. You can set it to whatever you want though)

    d) In the system shell (e.g., bash), cd into <dir> and type

            python temp.py

       ipdb will start and break at the "ipdb.set_trace()" line (this is a
       normal function of ipdb). In addition, Vim will jump to the same
       location.

    e) To set a breakpoint (the commands below are native to pdb), from the
       system shell type

            b 11

       This will set a breakpoint at line 11 of temp.py. Now type

            s

       to step 1 line forward in the code. You should see Vim now highlight
       line 11 as well. You can now type

            c

       and the code will run to the newly established breakpoint. Type

            cl

        to clear the breakpoint. and

            s

        to step again. You should see the breakpoint cleared in Vim. In
        addition to the above commands, all the niceties of IPython and ipdb
        are available from the shell, including object inspection, tab
        completion, etc.

    f)  In Vim, type "\d" to end the debug monitor

====================================================================
5. Sample Workflow (gdb)                        *vim_pdb_workflow_gdb*

    a)  Put the following 2 files in some directory called \<dir\>:
    
        -------------------------       |       -------------------------
        <dir>/temp.c                    |       <dir>/temp2.c
        -------------------------       |       -------------------------
                                        |
        int main() {                    |       #include <stdio.h>
                                        |       
            int a;                      |       int hello_world() {
            int b;                      |           printf("hello world\n");
            int c;                      |       }
                                        |
            a = 1;                      |
            b = a + 5;                  |
            c = a + b;                  |
                                        |
            printf("hi\n");             |
                                        |
            printf("calling sub\n");    |
            hello_world();              |
                                        |
        }                               |
                                        |
    
    b) on the command line, compile by typing:
    
            $ gcc -g -o temp temp2.c temp.c
    
    c) open temp.c and type "\d" to start the debug monitor
    
       (assuming you have set <localleader> to "\" as suggested in the
       settings/mappings section. You can set it to whatever you want though)
    
    d) In the system shell (e.g., bash), cd into \<dir\> and type
    
            $ python2.7 -c 'import vim_pdb; vim_pdb.monitor_gdb_file()' &
    
        (you can also just put 
         alias gdb_monit="python2.7 -c 'import vim_pdb; vim_pdb.monitor_gdb_file()'"
         in your .bashrc)
    
       This code will monitor gdb.txt for outputs and update the files the vim
       debugger is looking for as you step through the code.
    
    e) Finally, call gdb, removing some unnecesary files in the process (again,
       this can be aliased):
    
            (gdb) rm .debug_gdb_objs gdb.txt; gdb temp -x .gdbrc
    
       This starts gdb. From the command line, set a breakpoint and run the program:
    
            (gdb) b 11
            (gdb) run
    
       Notice that the cursor in vim has gone to line 11. In addition, because of
       the breakpoint, the line is highlighted red. Let's clear that breakpoint:
    
            (gdb) cl 11 
    
        Notice that the red highlight is now gone. Let's continue stepping through
        the code another 2 lines:
    
            (gdb) s
            (gdb) s
    
        Vim has opened temp2.c and put the cursor on the appropriate line. We can
        continue the code to the end:
    
            (gdb) c
    
    f)  In Vim, type "\d" to end the debug monitor

====================================================================
6. License                                      *vim_pdb_license*

        see LICENSE in the root directory

 vim:tw=78:ts=4:ft=help:norl:
